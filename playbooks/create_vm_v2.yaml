- hosts: localhost
  vars:
    vm_name: "{{ vm_name }}"  # VM name, dynamically passed from AAP Job Template
    template_name: "{{ catalog_name }}"  # The catalog template name
    namespace: "openshift"  # Namespace where the catalog template is stored
    target_namespace: "aap-vm-auto-provision-test"  # Target namespace for the VM
    bridge_network_name: "bridge-br1"  # Name of the NetworkAttachmentDefinition for the bridge network

  tasks:
    - name: Fetch the Template
      kubernetes.core.k8s_info:
        api_version: template.openshift.io/v1
        kind: Template
        name: "{{ template_name }}"
        namespace: "{{ namespace }}"
      register: vm_template

    - name: Fail if template not found
      fail:
        msg: "Template {{ template_name }} not found in namespace {{ namespace }}."
      when: vm_template.resources | length == 0

    - name: Process the template and customize VM configuration
      kubernetes.core.k8s:
        state: present
        definition: >
          {{
            {
              "apiVersion": "template.openshift.io/v1",
              "kind": "TemplateInstance",
              "metadata": {
                "name": "{{ vm_name }}",
                "namespace": "{{ target_namespace }}"
              },
              "spec": {
                "template": vm_template.resources[0] | combine({
                  "objects": [
                    {
                      "kind": "VirtualMachine",
                      "apiVersion": "kubevirt.io/v1",
                      "spec": {
                        "template": {
                          "spec": {
                            "domain": {
                              "devices": {
                                "interfaces": [
                                  {
                                    "name": "default",
                                    "masquerade": {}
                                  },
                                  {
                                    "name": "bridge-br1",
                                    "bridge": {}
                                  }
                                ]
                              }
                            },
                            "networks": [
                              {
                                "name": "default",
                                "pod": {}
                              },
                              {
                                "name": "bridge-br1",
                                "multus": {
                                  "networkName": "{{ bridge_network_name }}"
                                }
                              }
                            ],
                            "volumes": [
                              {
                                "name": "cloudinitdisk",
                                "cloudInitNoCloud": {
                                  "userData": |-
                                    #cloud-config
                                    users:
                                      - name: root
                                        passwd: redhat@123
                                        lock_passwd: false
                                        ssh_pwauth: true
                                    chpasswd:
                                      expire: false
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                })
              }
            }
          }}
      register: create_vm

    - name: Wait for the VM to be ready
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: "{{ vm_name }}"
        namespace: "{{ target_namespace }}"
      register: vmi
      retries: 60
      delay: 10
      until: >
        (vmi.resources[0].status.phase == "Running") and
        (vmi.resources[0].status.interfaces | default([]) | length > 0)

    - name: Print the IP address of the VM
      debug:
        msg: "The IP address of the virtual machine {{ vm_name }} is: {{ vmi.resources[0].status.interfaces[0].ipAddress }}"
