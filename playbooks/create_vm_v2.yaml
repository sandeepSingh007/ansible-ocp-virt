- hosts: localhost
  tasks:
    - name: Ensure namespace exists
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: aap-vm-auto-provision-test

    - name: Create fedora virtual machine with two network interfaces
      redhat.openshift_virtualization.kubevirt_vm:
        state: present
        name: fedora-httpd
        namespace: aap-vm-auto-provision-test
        labels:
          app: httpd
        instancetype:
          name: u1.medium
        preference:
          name: fedora
        spec:
          domain:
            devices:
              interfaces:
                # Default pod network interface
                - name: default
                  masquerade: {}

                # Second network interface using NetworkAttachmentDefinition
                - name: bridge-br1
                  bridge: {}

          networks:
            # Pod network
            - name: default
              pod: {}

            # Second network for bridge-br1 using NetworkAttachmentDefinition
            - name: bridge-br1
              multus:
                networkName: bridge-br1

          volumes:
            - containerDisk:
                image: quay.io/containerdisks/fedora:latest
              name: containerdisk
            - cloudInitNoCloud:
                userData: |-
                  #cloud-config
                  # Set root user password
                  users:
                    - name: root
                      password: $6$rounds=656000$kWo...JcRUbA4HKRkpGOq3KJwNsIhHxTczA
                      lock_passwd: false
                      ssh_pwauth: true
                  chpasswd:
                    expire: false
                name: cloudinit

    - name: Wait for virtual machine to be ready and retrieve IP address
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachineInstance
        name: fedora-httpd
        namespace: aap-vm-auto-provision-test
      register: vmi
      retries: 60
      delay: 10
      until: (vmi.resources[0].status.interfaces | length > 0) and 
             (vmi.resources[0].status.interfaces[0]['ipAddress'] | default('')) | length > 0

    - name: Print IP address of the VM
      debug:
        msg: "The IP address of the virtual machine is: {{ vmi.resources[0].status.interfaces[0]['ipAddress'] }}"
